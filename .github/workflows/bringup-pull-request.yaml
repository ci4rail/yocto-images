name: Bringup Image on pull request
on:
  pull_request:
    branches:
      - main
    paths:
      - "bringup/kasfile-cpu01-bringup.yaml"
      - "kas-includes/tdxbsp.yaml"
      - "kas-includes/virtualization.yaml"
      - "kas-includes/kasfile-mender.yaml"
      - ".github/workflows/bringup-pull-request.yaml"
  push:
    branches:
      - main

env:
  IMAGE_TYPE: bringup
  MACHINE: cpu01
  BUILDER_IMAGE: ghcr.io/siemens/kas/kas:2.3.3
  TAR_IMAGE_SEARCH_STRING: images/moducop-cpu01/*Bringup*CI.OS.*.mender_tezi.tar

jobs:
  calculate-version:
    name: Calculate Version
    # Currently not working with Ubuntu 20.04
    runs-on: ubuntu-18.04
    outputs:
      #0.1.0-36.cleanup.e3132eb42a917c62b1f9198def62e78a4346c35d
      version: ${{ steps.gitversion.outputs.majorMinorPatch }}-${{ steps.gitversion.outputs.commitsSinceVersionSource }}.${{ github.event.pull_request.head.ref }}.${{ steps.gitversion.outputs.shortSha }}
      short_sha: ${{ steps.gitversion.outputs.shortSha }}
      name_suffix: ${{ steps.eventCheck.outputs.nameSuffix }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: "5.x"
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
      - name: Generate Image name dependend on github event
        id: eventCheck
        env:
          EVENT_NAME: ${{ github.event_name }}
        run: |
          if [ "$EVENT_NAME" = "pull_request" ]; then
              echo "::set-output name=nameSuffix::-pr"
          elif [ "$EVENT_NAME" = "push" ]; then
              echo "::set-output name=nameSuffix::-testing"
          else
              echo "::set-output name=nameSuffix::-invalid"
          fi

  build-and-push-image:
    needs: calculate-version
    runs-on: [self-hosted, linux, x64, yocto-runner]

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Get Cache for Yocto Builds
        if: github.event_name == 'pull_request'
        run: |
          rsync -rht --ignore-missing-args /yocto-cache/downloads/* /downloads/
          rsync -rht --ignore-missing-args /yocto-cache/sstate-cache/* /sstate-cache/

      - name: Log into Docker
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo ${DOCKER_PASSWORD} | docker login ${DOCKER_REGISTRY} -u ${DOCKER_USERNAME} --password-stdin

      - name: Build Yocto
        env:
          # Required internally for build
          MENDER_SERVER_URL: https://hosted.mender.io
          MENDER_TENANT_TOKEN: ${{ secrets.MENDER_TENANT_TOKEN }}
          IMAGE_NAME_SUFFIX: ${{ needs.calculate-version.outputs.name_suffix }}
          IMAGE_GIT_VERSION: ${{ needs.calculate-version.outputs.short_sha }}
          MENDER_ARTIFACT_NAME: ${{ env.MACHINE }}-${{ env.IMAGE_TYPE }}-${{ needs.calculate-version.outputs.version }}${{ needs.calculate-version.outputs.name_suffix }}
        run: |
          docker run \
                -v /install:/install \
                -v /sstate-cache:/sstate-cache \
                -v /downloads:/downloads \
                -v ${GITHUB_WORKSPACE}/${IMAGE_TYPE}:/work \
                -v ${GITHUB_WORKSPACE}/kas-includes:/kas-includes \
                -e USER_ID=$(id -u ${USER}) \
                -e GROUP_ID=$(id -g ${USER}) \
                -e GROUP=$(id -ng ${USER}) \
                -e USER=$(id -nu ${USER}) \
                -e MENDER_SERVER_URL=${MENDER_SERVER_URL} \
                -e MENDER_TENANT_TOKEN=${MENDER_TENANT_TOKEN} \
                -e IMAGE_NAME_SUFFIX=${IMAGE_NAME_SUFFIX} \
                -e IMAGE_GIT_VERSION=${IMAGE_GIT_VERSION} \
                -e MENDER_ARTIFACT_NAME=${MENDER_ARTIFACT_NAME} \
                --entrypoint /bin/bash \
                -w /work \
                ${BUILDER_IMAGE} \
                -c "groupadd -o --gid \${GROUP_ID} \${GROUP}
                    useradd -o --uid \${USER_ID} --gid \${GROUP_ID} \${USER}
                    chown -R \${USER_ID}:\${GROUP_ID} /install /sstate-cache /downloads /work /kas-includes
                    exec gosu \${USER} kas build kasfile-${MACHINE}-${IMAGE_TYPE}.yaml"

      - name: Store Cache for Yocto Builds
        if: github.event_name == 'pull_request'
        run: |
          rsync -rht /downloads/* /yocto-cache/downloads/
          rsync -rht /sstate-cache/* /yocto-cache/sstate-cache/

      - name: Check Build Artefacts are there
        id: artefacts
        run: |
          tarImagePath=$(ls -t /install/${TAR_IMAGE_SEARCH_STRING} | head -n 1)
          mkdir ${GITHUB_WORKSPACE}/minio
          cp ${tarImagePath} ${GITHUB_WORKSPACE}/minio

      - name: Push Images to Minio
        uses: hkdobrev/minio-deploy-action@v1
        with:
          endpoint: https://minio.ci4rail.com
          access_key: ${{ secrets.MINIO_ACCESS_KEY }}
          secret_key: ${{ secrets.MINIO_SECRET_KEY }}
          bucket: ${{ env.MACHINE }}-${{ env.IMAGE_TYPE }}${{ needs.calculate-version.outputs.name_suffix }}
          source_dir: minio
          target_dir: "/"
