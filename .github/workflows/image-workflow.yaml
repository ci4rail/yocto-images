name: "build and test yocto image"

on:
  workflow_call:
    inputs:
      machine:
        required: true
        type: string
      image_type:
        required: true
        type: string
      docker_username:
        required: true
        type: string
      docker_registry:
        required: false
        type: string
        default: ""

    secrets:
      docker_password:
        required: true
      mender_tenant_token:
        required: true

env:
  BUILDER_IMAGE: ghcr.io/siemens/kas/kas:2.6.3
  MENDER_CLI_IMAGE: ci4rail/mender-cli:master-2021-03-08
  MENDER_SERVER_URL: https://hosted.mender.io

jobs:
  calculate-version:
    name: Calculate Version
    runs-on: ubuntu-22.04
    outputs:
      #0.1.0-36.cleanup.e3132eb42a917c62b1f9198def62e78a4346c35d
      version: ${{ steps.gitversion.outputs.majorMinorPatch }}-${{ steps.gitversion.outputs.commitsSinceVersionSource }}.${{ github.event.pull_request.head.ref }}.${{ steps.shortSha.outputs.shortSha }}
      name_suffix: ${{ steps.eventCheck.outputs.nameSuffix }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: "5.x"
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
      - name: Get git sha as on PR gitversion provides incorrect sha
        id: shortSha
        env:
          EVENT_NAME: ${{ github.event_name }}
        run: |
          echo "Github event is a $EVENT_NAME"
          if [ "$EVENT_NAME" = "pull_request" ]; then
              echo "::set-output name=shortSha::`echo ${{ github.event.pull_request.head.sha }} | cut -c1-8`"
          elif [ "$EVENT_NAME" = "push" ]; then
              echo "::set-output name=shortSha::${GITHUB_SHA::8}"
          else
              echo "::set-output name=shortSha::invalid"
          fi
      - name: Generate Image name dependend on github event
        id: eventCheck
        env:
          EVENT_NAME: ${{ github.event_name }}
        run: |
          if [ "$EVENT_NAME" = "pull_request" ]; then
              echo "::set-output name=nameSuffix::-pr"
          elif [ "$EVENT_NAME" = "push" ]; then
              echo "::set-output name=nameSuffix::"
          else
              echo "::set-output name=nameSuffix::-invalid"
          fi

  dump:
    name: "Dump"
    runs-on: ubuntu-latest
    needs: calculate-version

    steps:
      - name: "Dump"
        run: |
          echo "image name is ${{ needs.calculate-version.outputs.version }}"
          echo "name suffix is ${{ needs.calculate-version.outputs.name_suffix }}"

  build-and-push-image:
    needs: calculate-version
    name: Build and Push Image
    runs-on: [self-hosted, linux, x64, yocto-runner]
    outputs:
      # NEEDED???
      bucket: ${{ inputs.machine }}-${{ inputs.image_type }}${{ needs.calculate-version.outputs.name_suffix }}
    steps:
      - uses: actions/checkout@v2

      - name: Log into Docker
        env:
          DOCKER_PASSWORD: ${{ secrets.docker_password }}
        run: echo ${DOCKER_PASSWORD} | docker login ${{ inputs.docker_registry }} -u ${{ inputs.docker_username }} --password-stdin

      - name: Get directories for yocto build
        id: gen_dirs
        ## For pull request, use a persistent store (downloads, sstate) for each runner (e.g. yocto-runner-lbmnn-grbvq)
        ## For non-pull request, build in local directory from scratch
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
              PERS_DIR=yocto-cache/${{ runner.name }}
          else
              PERS_DIR=$(pwd)
          fi
          echo "PERS_DIR is ${PERS_DIR}"
          echo "::set-output name=download_dir::${PERS_DIR}/downloads"
          echo "::set-output name=state_dir::${PERS_DIR}/sstate"
          echo "::set-output name=install_dir::${PERS_DIR}/install"

      - name: Build Yocto
        env:
          MENDER_ARTIFACT_NAME: ${{ env.MACHINE }}-${{ env.IMAGE_TYPE }}-${{ needs.calculate-version.outputs.version }}${{ needs.calculate-version.outputs.name_suffix }}
        run: |
          docker run \
                -v ${{ steps.gen_dirs.outputs.install_dir }}:/install \
                -v ${{ steps.gen_dirs.outputs.sstate_dir }}:/sstate-cache \
                -v ${{ steps.gen_dirs.outputs.download_dir }}:/downloads \
                -v ${GITHUB_WORKSPACE}/${{ inputs.machine }}-${{ inputs.image_type }}-image:/work \
                -v ${GITHUB_WORKSPACE}/kas-includes:/kas-includes \
                -e USER_ID=$(id -u ${USER}) \
                -e GROUP_ID=$(id -g ${USER}) \
                -e MENDER_SERVER_URL=${MENDER_SERVER_URL} \
                -e MENDER_TENANT_TOKEN=${{ secrets.mender_tenant_token }} \
                -e IMAGE_NAME_SUFFIX=${{ needs.calculate-version.outputs.name_suffix }} \
                -e IMAGE_GIT_VERSION=${{ needs.calculate-version.outputs.version }} \
                -e MENDER_ARTIFACT_NAME=${MENDER_ARTIFACT_NAME} \
                -w /work \
                ${BUILDER_IMAGE} \
                build kasfile.yaml


  dump2:
    name: "Dump2"
    runs-on: ubuntu-latest
    needs: build-and-push-image

    steps:
      - name: "Dump"
        run: |
          echo "bucket is ${{ needs.build-and-push-image.outputs.bucket }}""
