# ===================================================
# mounts
# ===================================================
# Yocto images (DEPLOY_DIR)
mount=install-dir-base:
  bind: base/install
  path: /install

# Where the yocto-build happens
mount=build-dir-base:
  bind: base
  path: /work

# ===================================================
# jobs
# ===================================================
job=cpu01-base-gen-image-version:
  use: image-kas
  depends:
    - yocto-envs
    - yocto-layer-revparse
  mounts:
    - mount-buildingblock-gitversion-source-dir
  sources: yocto/layer-revs
  artifact: /git/base/.generated-cpu01-image-naming.yaml
  user: "{user.uid}:{user.gid}"
  env:
    - "USER={user.name}"
  entrypoint: /bin/bash
  command: /git/scripts/gen-image-version.sh
    /git
    /git/yocto/layer-revs
    cpu01-base
    /git/base/.generated-cpu01-image-naming.yaml

job=cpu01-base-yocto-shell:
  use: image-kas
  depends:
    - yocto-envs
  mounts:
    - build-dir-base
    - kas-includes-dir
    - download-dir-yocto
    - sstate-dir-yocto
    - install-dir-base
  working-dir: /work
  interactive: true
  env:
    - USER_ID={user.uid}
    - GROUP_ID={user.gid}
    - TERM=xterm-256color
    - SHELL=/bin/bash
    - MENDER_SERVER_URL={env.MENDER_SERVER_URL}
    - MENDER_TENANT_TOKEN={env.MENDER_TENANT_TOKEN}
    - IMAGE_NAME_SUFFIX={env.IMAGE_NAME_SUFFIX}
  command: "shell /work/kasfile-cpu01-base.yaml"
  annotations:
    description: "\t\t--> interactive yocto shell cpu01-base config"
    tags:
      - base

job=cpu01-base-build-image:
  use: image-kas
  mounts:
    - build-dir-base
    - kas-includes-dir
    - download-dir-yocto
    - sstate-dir-yocto
    - install-dir-base
  working-dir: /work
  interactive: true
  env:
    - USER_ID={user.uid}
    - GROUP_ID={user.gid}
    - TERM=xterm-256color
    - SHELL=/bin/bash
    - MENDER_SERVER_URL={env.MENDER_SERVER_URL}
    - MENDER_TENANT_TOKEN={env.MENDER_TENANT_TOKEN}
    - IMAGE_NAME_SUFFIX={env.IMAGE_NAME_SUFFIX}
  depends:
    - cpu01-base-gen-image-version
  sources:
    - base/kasfile-cpu01-base.yaml
    - kas-includes/kasfile-tdxbsp.yaml
    - kas-includes/kasfile-mender.yaml
  command: "build /work/kasfile-cpu01-base.yaml:.generated-cpu01-image-naming.yaml"
  annotations:
    description: "\t\t--> Build cpu01-base-image"
    tags:
      - base

job=cpu01-base-mender-upload:
  use: image-mender-cli
  interactive: true
  mounts:
    - install-dir-base
    - mender-auth-dir
  user: "{user.uid}:{user.gid}"
  entrypoint: /bin/sh
  command: -c "/mender-cli --token=/mender-auth/authtoken artifacts upload /install/images/moducop-cpu01/*Edgefarm*CI.OS.*.mender"
  annotations:
    description: "\t\t--> Upload cpu01-base image to mender"
    tags:
      - base

job=cpu01-base-mender-deploy:
  use: image-curl-jq
  mounts:
    - install-dir-base
    - scripts-dir
    - mender-auth-dir
  user: "{user.uid}:{user.gid}"
  env:
    - MENDER_DEVICE_ID={env.MENDER_DEVICE_ID}
    - MENDER_AUTH_TOKEN=/mender-auth/authtoken
  command: /scripts/mender_deploy_artifact_to_device.sh /install/images/moducop-cpu01/*Edgefarm*CI.OS.*.mender
  annotations:
    description: "\t\t--> Deploy cpu01-base image to MENDER_DEVICE_ID"
    tags:
      - base

job=cpu01-base-minio-push:
  use: image-minio-client
  mounts:
    - build-dir-base
  entrypoint: /bin/sh
  command: |
    -c "
        fileToPush=$(ls -t /work/install/images/moducop-cpu01/*Edgefarm*CI.OS.*.mender_tezi.tar | head -n 1)
        echo Push image ${fileToPush} to minio
        mc cp ${fileToPush} ci4rail_endpoint/cpu01-edgefarm/
       "
  env:
    - MC_HOST_ci4rail_endpoint={env.MINIO_ENDPOINT}
  annotations:
    description: "\t\t--> Push cpu01-base image to Minio"
    tags:
      - base

job=cpu01-base-minio-deploy:
  use: image-ssh-client
  mounts:
    - build-dir-base
    - ssh-dir
  interactive: true
  net-mode: host
  entrypoint: /bin/bash
  command: |
    -c '
      fileToInstall=$(ls -t /work/install/images/moducop-cpu01/*Edgefarm*CI.OS.*.mender_tezi.tar | head -n 1 | rev | cut -d"/" -f 1 | rev)
      echo Deploy image ${fileToInstall} using Raspberry Pi with IP ${RASPBERRY_PI_IP} to connected Moducop
      ssh yoda@${RASPBERRY_PI_IP} "
          s3cmd --config=/etc/s3cfg_ci4rail_minio get s3://${IMAGE}/${fileToInstall} /tmp/tezi-image.tar --force
          sudo make-gadget-image /tmp/tezi-image.tar /tmp/tezi.img
          docker run \
                  --network=host \
                  --rm \
                  --privileged \
                  --name=tdx-installer \
                  -e BRICKD_UID=\$BRICKD_UID \
                  -e BRICKD_PORT=\$BRICKD_PORT \
                  -e BRICKD_IP=\$BRICKD_IP \
                  -v /tmp/tezi.img:/mnt/yocto_image/yocto.img \
                  -v /dev/${CONSOLE_PORT}:/dev/ttyTEZI \
                  -v /sys:/sys \
                  -v /dev:/dev \
                  ci4rail/tdx-installer:${TDX_INSTALLER_IMAGE_TAG} \
                  --timeout 600
          tinkerforge call industrial-dual-relay-bricklet \$BRICKD_UID set-monoflop 0 false 2000
          rm /tmp/tezi-image.tar
          sudo rm /tmp/tezi.img
        "
       '
  env:
    - USER_ID={user.uid}
    - GROUP_ID={user.gid}
    - RASPBERRY_PI_IP={env.RASPBERRY_PI_IP}
    - IMAGE=cpu01-edgefarm
    - CONSOLE_PORT={env.CONSOLE_PORT}
  annotations:
    description: "\t\t--> Deploy cpu01-base image via Raspberry Pi with RASPBERRY_PI_IP to connected Moducop"
    tags:
      - base
