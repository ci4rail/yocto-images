name: Base Image on pull request
on:
  pull_request:
    branches:
      - main
    paths:
      - "base/kasfile-cpu01-base.yaml"
      - "kas-includes/**"
      - ".github/workflows/base-pull-request.yaml"

env:
  DIR: base
  NAME: cpu01-base
  # The mender artifact name suffix
  MENDER_ARTIFACT_DEV_SUFFIX: -testing
  # The tezi file name suffix
  IMAGE_NAME_SUFFIX: -testing
  BUILDER_IMAGE: ghcr.io/siemens/kas/kas:2.3.3
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  calculate-version:
    name: Calculate Version
    # Currently not working with Ubuntu 20.04
    runs-on: ubuntu-18.04
    outputs:
      #0.1.0-36.cleanup.e3132eb42a917c62b1f9198def62e78a4346c35d
      version: ${{ steps.gitversion.outputs.majorMinorPatch }}-${{ steps.gitversion.outputs.commitsSinceVersionSource }}.${{ github.event.pull_request.head.ref }}.${{ steps.gitversion.outputs.shortSha }}
      short_sha: ${{ steps.gitversion.outputs.shortSha }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: "5.x"
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7

  build-image:
    needs: calculate-version
    runs-on: self-hosted

    steps:
      - name: Cache for Yocto Builds
        uses: actions/cache@v2
        env:
          cache-name: yocto-cache
        with:
          path: |
            ~/downloads
            ~/sstate
          key: yocto-cache

      - name: Log into Docker
        run: echo ${DOCKER_PASSWORD} | docker login ${DOCKER_REGISTRY} -u ${DOCKER_USERNAME} --password-stdin

      - name: Build Yocto
        env:
          IMAGE_GIT_VERSION: ${{ needs.calculate-version.outputs.short_sha }}
          VERSION: ${{ needs.calculate-version.outputs.version }}
          MENDER_ARTIFACT_DEV_SUFFIX: -pr
          MENDER_ARTIFACT_NAME: ${NAME}-${VERSION}${MENDER_ARTIFACT_DEV_SUFFIX}
          MENDER_SERVER_URL: https://hosted.mender.io
          MENDER_TENANT_TOKEN: ${{ secrets.MENDER_TENANT_TOKEN }}
          IMAGE_NAME_SUFFIX: -pr
        run: |
          docker run \
                -v ~/install:/install \
                -v ~/sstate:/sstate \
                -v ~/downloads:/downloads \
                -v ${GITHUB_WORKSPACE}/${DIR}:/work \
                -v ${GITHUB_WORKSPACE}/kas-includes:/kas-includes \
                -e USER_ID=$(id -u ${USER}) \
                -e GROUP_ID=$(id -g ${USER}) \
                -e GROUP=$(id -ng ${USER}) \
                -e USER=$(id -nu ${USER}) \
                -w /work \
                --entrypoint /bin/bash \
                ${BUILDER_IMAGE} \
                -c 'groupadd -o --gid ${GROUP_ID} ${GROUP} && \
                    useradd -o --uid ${USER_ID} --gid ${GROUP_ID} ${USER} && \
                    chown -R ${USER_ID}:${GROUP_ID} /install /sstate /downloads /work /kas-includes && \
                    exec gosu ${USER} kas build kasfile-${NAME}.yaml'

      - name: Check Build Artefacts are there
        run: |
          ls -al ~/install/images/*/*CI.OS.LMP*.mender_tezi.tar
          ls -al ~/install/images/*/*CI.OS.LMP*.mender
